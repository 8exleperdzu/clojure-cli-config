;; The deps.edn file describes the information needed to build a classpath.
;;
;; deps.edn configuration is a combination of
;; - install-level (latest Clojure version at install time)
;; - user level - $HOME/.clojure/deps.edn
;; - project level - deps.edn in root of project
;;
;; For all attributes other than :paths, these config files are merged left to right.
;; Only the last :paths is kept and others are dropped.

{
 ;; Paths
 ;;   Directories in the current project to include in the classpath
 ;; :paths ["src"]

 ;; External dependencies
 ;; :deps {
 ;;   org.clojure/clojure {:mvn/version "1.10.1"}
 ;; }

 ;; Aliases
 ;;   resolve-deps aliases (-R) affect dependency resolution, options:
 ;;     :extra-deps - specifies extra deps to add to :deps
 ;;     :override-deps - specifies a coordinate to use instead of that in :deps
 ;;     :default-deps - specifies a coordinate to use for a lib if one isn't found
 ;;   make-classpath aliases (-C) affect the classpath generation, options:
 ;;     :extra-paths - vector of additional paths to add to the classpath
 ;;     :classpath-overrides - map of lib to path that overrides the result of resolving deps

 :aliases
 {

  ;; Creating projects from templates
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; https://github.com/seancorfield/clj-new
  ;;
  ;; clj -A:new template-name domain/namespace
  ;; clj -m myname.myapp
  ;; clj -A:test:runner
  :new
  {:extra-deps {seancorfield/clj-new {:mvn/version "0.8.6"}}
   :main-opts  ["-m" "clj-new.create"]}


  ;; REPL experience
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; REPL with syntax highlighting, built in docs and a quit command `:repl/quit`
  :rebel
  {:extra-deps {com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
   :main-opts  ["-m" "rebel-readline.main"]}


  ;; Hot loading dependencies
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Add new deps to a running REPL:
  ;; (require '[clojure.tools.deps.alpha.repl :refer [add-lib]])
  ;; (add-lib 'domain/library {:mvn/version "RELEASE"})
  ;; Git deps
  ;; (require '[clojure.tools.gitlibs :as gitlibs])
  ;; (defn load-master [lib]
  ;;   (let [git (str "https://github.com/" lib ".git")]
  ;;    (add-lib lib {:git/url git :sha (gitlibs/resolve git "master")})))
  ;; - e.g., using the GitHub path (not the usual Maven group/artifact):
  ;; (load-master 'clojure/tools.trace)
  :deps
  {:extra-deps {org.clojure/tools.deps.alpha
                {:git/url "https://github.com/clojure/tools.deps.alpha"
                 :sha     "80c1b56e5cbd083193b868cbdc8f87413688c9e9"}}}


  ;; Testing frameworks
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Clojure.test
  ;; Nothing required - available via Clojure

  ;; Clojure spec
  :spec
  {:extra-deps org.clojure/spec.alpha {:mvn/version "0.2.176"}}


  ;; Clojure spec 2 - under active development
  :spec2
  {:extra-deps {org.clojure/spec-alpha2
                {:git/url "https://github.com/clojure/spec-alpha2"
                 :sha     "495e5ac3238be002b4de72d1c48479f6bec06bb3"}}}


  ;; Expectations test framework
  ;; - see https://github.com/clojure-expectations/expectations
  ;; - and https://github.com/clojure-expectations/clojure-test
  ;; clj -A:test:expect:test-runner (cognitect test runner)
  :expect
  {:extra-deps {expectations              {:mvn/version "RELEASE"}
                expectations/clojure-test {:mvn/version "RELEASE"}}}


  ;; Test runners
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Cognitect test-runner
  ;; https://github.com/cognitect-labs/test-runner
  :test-runner
  {:extra-paths ["test"]
   :extra-deps  {com.cognitect/test-runner
                 {:git/url "https://github.com/cognitect-labs/test-runner.git"
                  :sha     "209b64504cb3bd3b99ecfec7937b358a879f55c1"}}
   :main-opts   ["-m" "cognitect.test-runner"]}


  ;; midje-runner
  ;; https://github.com/miorimmax/midje-runner
  :midje-runner {:extra-paths ["test"]
                 :extra-deps  {midje-runner
                               {:git/url "https://github.com/miorimmax/midje-runner.git"
                                :sha     "ee9c2813e150ae6b3ea41b446b09ba40fc89bdc1"}}
                 :main-opts   ["-m" "midje-runner.runner"]}


  ;; eftest - fast and pretty test runner
  ;; There may be a nicer way to do the main-opts - see the Eastwood and kibit issue discussion
  ;; https://github.com/jonase/eastwood/commit/4d1d05cc6de6ce565207d9a3c86864364f53f006
  :eftest
  {:extra-paths ["test"]
   :extra-deps  {eftest {:mvn/version "0.5.9"}}
   :main-opts   ["-e"  "(require,'[eftest.runner,:refer,[find-tests,run-tests]]),(run-tests,(find-tests,\"test\"))"]}


  ;; kaocha - comprehensive test runner for Clojure/Script
  ;; https://github.com/lambdaisland/kaocha
  :kaocha
  {:extra-paths ["test"]
   :extra-deps  {lambdaisland/kaocha {:mvn/version "0.0-590"}}
   :main-opts   ["-m" "kaocha.runner"]}


  ;; Eastwood
  ;; https://github.com/jonase/eastwood#running-eastwood-in-a-repl
  :eastwood
  {:main-opts  ["-m" "eastwood.lint" {:source-paths ["src"]}]
   :extra-deps {jonase/eastwood {:mvn/version "RELEASE"}}}


  ;; kibit
  ;; https://github.com/jonase/kibit/issues/221
  :kibit
  {:extra-deps {tvaughan/kibit-runner {:mvn/version "0.1.0"}}
   :main-opts  ["-m" "kibit-runner.cmdline"]}


  ;; Dependency version management
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Manage versions for maven and git dependencies
  ;; https://github.com/Olical/depot
  :outdated
  {:extra-deps {olical/depot {:mvn/version "1.8.4"}}
   :main-opts  ["-m" "depot.outdated.main"]}

  ;; clj -A:outdated --update
  ;; or
  ;; clj -A:outdated-update
  :outdated-update
  {:extra-deps {olical/depot {:mvn/version "1.8.4"}}
   :main-opts  ["-m" "depot.outdated.main"
                "--update"]}

  :ancient
  {:main-opts  ["-m" "deps-ancient.deps-ancient"]
   :extra-deps {deps-ancient {:mvn/version "RELEASE"}}}


  ;; Performance testing
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; https://github.com/hugoduncan/criterium/
  ;; clojure -A:rebel:bench
  ;; (require '[criterium.core :refer [bench quick-bench]]) ; require criterium
  ;; (bench (adhoc-expression)) ; timing of a self contained expression
  ;;
  ;; (require '[practicalli/namespace-name]) ; require project code
  ;; (in-ns 'practicalli/namespace-name)
  ;; (quick-bench (project-function args))
  ;;
  ;; $HOME/.clojure/deps.edn
  :bench
  {:extra-deps {criterium {:mvn/version "0.4.5"}}}


  ;; - see https://github.com/clojure-goes-fast/clj-memory-meter
  ;; - (require '[clj-memory-meter.core :as mm])
  ;; - (mm/measure (your-expression))
  :measure
  {:extra-deps {com.clojure-goes-fast/clj-memory-meter {:mvn/version "0.1.2"}}}



  ;; Deployment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; depstar - build jars, uberjars
  ;; https://github.com/seancorfield/depstar
  ;; clojure -A:depstar -m hf.depstar.jar MyLib.jar
  ;; clojure -A:depstar -m hf.depstar.uberjar MyProject.jar
  :depstar
  {:extra-deps
   {seancorfield/depstar {:mvn/version "0.5.2"}}}


  ;; uberdeps - uberjar builder
  ;; https://github.com/tonsky/uberdeps
  ;; "--target" "target/cdeps-0.1.0.jar" in `:main-opts` to specify output file
  :uberdeps
  {:extra-deps {uberdeps {:mvn/version "0.1.8"}}
   :main-opts  ["-m" "uberdeps.uberjar"]}


  } ;; End of alias definitions


 ;; Provider attributes

 :mvn/repos {
             "central" {:url "https://repo1.maven.org/maven2/"}
             "clojars" {:url "https://repo.clojars.org/"}
             }
 }
